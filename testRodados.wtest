import rodados.*
import dependencias.*
import pedidos.*

describe "tests de rodados" {
  const deportes = new Dependencia(empleados= 45)
  const cultura = new Dependencia(empleados= 31)
  const cachito = new Corsa(color="rojo")

  method initialize(){
    deportes.agregarAFlota(cachito)
    deportes.agregarAFlota(new Corsa(color="azul"))
    deportes.agregarAFlota(new Corsa(color="verde"))
    deportes.agregarAFlota(new Kwid(tieneTanqueAdicional=true))
    deportes.agregarAFlota(new Especial(capacidad=5,velocidadMaxima=160,peso=1200,color="beige"))//revisar

    cultura.agregarAFlota(cachito)
    cultura.agregarAFlota(new Kwid(tieneTanqueAdicional=true))
    cultura.agregarAFlota(new Kwid(tieneTanqueAdicional=true))
    cultura.agregarAFlota(new Kwid(tieneTanqueAdicional=false))
    cultura.agregarAFlota(trafic)
    trafic.interior(popular)
    trafic.motor(bataton)



  }

  test "deporte tiene peso total 6450" {
    assert.equals(1300+1300+1300+1350+1200, deportes.pesoTotalFlota())
  }

  test "cultura tiene peso total 10700" {
    assert.equals(1300+1300+1300+1350+1200, deportes.pesoTotalFlota())
  }

  test "deporte esta bien equipada" {
    assert.that(deportes.estaBienEquipada())
  }

  test "cultura no esta bien equipada" {
    assert.notThat(cultura.estaBienEquipada())
  }

  test "la capacidad total de coches azules en deporte es 7" {
    assert.equals(7, deportes.capacidadTotalEnColor("azul"))
  }

  test "la capacidad total de coches azules en cultura es 10" {
    assert.equals(3+3+4, cultura.capacidadTotalEnColor("azul"))
  }

  test "el color del rodado mas rapido en deportes es beige" {
    assert.equals("beige",deportes.colorDelRodadoMasRapido())
  }

  test "el color del rodado mas rapido en cultura es azul" {
    assert.equals("rojo",cultura.colorDelRodadoMasRapido())
  }

  test "dependencia deportes es grande" {
    assert.that(deportes.esGrande())
  }
  
  test "dependencia cultura no es grande" {
    assert.notThat(cultura.esGrande())    
  }

  test "la capacidad faltante en deportes es 25" {
    assert.equals(45-(4+4+4+3+5), deportes.capacidadFaltante())
  }

  test "la capacidad faltante en cultura es 5" {
    assert.equals(31-(4+3+3+4+12), cultura.capacidadFaltante())    
  }
}

describe "test pedidos - etapa 2" {
  const cachito = new Corsa(color="rojo")
  const pedido = new Pedido(distancia=960, tiempoMax=8, cantPasajeros=4, coloresIncomp=#{"azul","negro"})


  test "la velocidad requerida del pedido es 120km" {
    assert.equals(120, pedido.velocidadRequerida())
  }

  test "cachito puede satisfacer el pedido" {
    assert.that(pedido.autoSatisfacePedido(cachito))
  }

  test "agregamos rojo a colores incompatibles del pedido, cachito ya no satisface ped" {
    pedido.agregarColorImcomp("rojo")
    assert.notThat(pedido.autoSatisfacePedido(cachito))
  }
  test "ahora pedido tiene 6 pasajeros, cachito ya no satisface ped" {
    pedido.cantPasajeros(6)
    assert.notThat(pedido.autoSatisfacePedido(cachito))
  }

  test "ahora pedido tiene tiempoMAx 6hs, velRequer es 160, cachito ya no satisface ped" {
    pedido.tiempoMax(6)
    assert.equals(160, pedido.velocidadRequerida())
    assert.notThat(pedido.autoSatisfacePedido(cachito))
  }
}